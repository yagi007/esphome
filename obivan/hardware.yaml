esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 8MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    advanced:
      enable_idf_experimental_features: true
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: "y"
      CONFIG_FREERTOS_HZ: "1000"
      CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_240: y
      CONFIG_ESPTOOLPY_FLASHMODE_QIO: y
      CONFIG_ESPTOOLPY_FLASHFREQ_120M: y
      CONFIG_SPIRAM_MODE_OCT: y
      CONFIG_IDF_EXPERIMENTAL_FEATURES: y
      CONFIG_SPIRAM_SPEED_120M: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: y
      CONFIG_COMPILER_OPTIMIZATION_PERF: y

esphome:
  name: obivan-s7
  friendly_name: ObiVan-S7
  min_version: "2025.4.2"
  platformio_options:
    build_flags: "-DBOARD_HAS_PSRAM"
    board_build.arduino.memory_type: qio_opi
    board_build.flash_mode: dio
    board_upload.maximum_ram_size: 524288
  on_boot:
    priority: -100
    then:
      # Inicializace služeb po probuzení z deep sleep
      - wifi.enable:
      # BLE tracker se spouští automaticky při inicializaci komponenty
      - switch.turn_on: lcdbacklight
      - light.turn_on: display_backlight_control
      - lvgl.resume:
      - lvgl.page.show: page_bootscreen
      - script.execute: update_bootscreen_progress
      - script.execute: init_system_values
      - delay: 1s
      - script.execute: update_bootscreen_progress
      - delay: 1s
      - script.execute: update_bootscreen_progress
      - delay: 1s
      - script.execute: update_bootscreen_progress
      - delay: 1s
      - script.execute: update_bootscreen_progress
      - script.execute: apply_brightness
      - delay: 1s
      - script.execute: hide_bootscreen
      - logger.log: "System initialized with saved brightness and services restored"

psram:
  mode: octal
  speed: 120MHz

i2c:
  sda: GPIO08
  scl: GPIO09
  scan: True
  id: bus_a

# Enable logging
logger:
  level: DEBUG # Dočasně zvýšeno na DEBUG pro diagnostiku deep sleep problémů
  logs:
    esp32_ble_tracker: ERROR # Omezit BLE logy
    victron_ble: ERROR # Omezit Victron logy
    lvgl: ERROR # Zvýšeno pro diagnostiku LVGL problémů
    esp-idf: WARN # Zvýšeno pro diagnostiku
    wifi: INFO # Zvýšeno pro diagnostiku WiFi problémů
    esp32_touch: INFO

# Enable Home Assistant API
#api:
#  encryption:
#    key: "7OdsT2VL+zpSZF0dGJcmj3/3t8MsMlETd5qFgJsvwW4="

ota:
  - platform: esphome
    password: "243f16dd6b3829c4271dd77b05af91bc"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: LIGHT # Úspora energie
  passive_scan: True
  manual_ip:
    static_ip: 192.168.4.26
    gateway: 192.168.4.1
    subnet: 255.255.252.0
  #  reboot_timeout: 10min # Restart při dlouhodobém výpadku
  output_power: 17dB # Snížit výkon (výchozí je 20dB)

mdns:
  disabled: true

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Prague

# WiFi sensor pro RSSI hodnoty
sensor:
  - platform: wifi_signal
    id: wifi_rssi
    name: "WiFi Signal"
    update_interval: 30s

globals:
  - id: manual_display_off
    type: bool
    initial_value: "false"
  - id: ignore_touch
    type: bool
    initial_value: "false"

# Stav pro dvojité klepnutí (pro probuzení podsvitu)
script:
  - id: touch_wake
    then:
      - delay: 500ms # Počkat 2 sekundy před probuzením
      - if:
          condition:
            and:
              - switch.is_off: lcdbacklight
              - light.is_off: display_backlight_control
          then:
            - switch.turn_on: lcdbacklight
            - light.turn_on: display_backlight_control
            - lvgl.resume:
            # Restart BLE scanning after wake up (with check)
            - lambda: |-
                ESP_LOGI("touch_wake", "Display woke up - restarting BLE scan...");
            - esp32_ble_tracker.start_scan:
            - logger.log: "Display woke up - BLE scan restarted"

  - id: touch_ignore_short
    then:
      - globals.set:
          id: ignore_touch
          value: "true"
      - delay: 800ms
      - globals.set:
          id: ignore_touch
          value: "false"

  - id: apply_brightness
    then:
      - lambda: |-
          float brightness = id(display_brightness) / 100.0f;
          id(id_output_backlight_brightness).set_level(brightness);
          ESP_LOGI("brightness", "Applied brightness: %d%% (%.2f) directly to GPIO16", id(display_brightness), brightness);

  - id: reset_to_defaults
    then:
      - lambda: |-
          // Reset na výchozí hodnoty
          id(deep_sleep_timeout) = 300;
          id(ble_scan_interval) = 10;
          id(display_brightness) = 80;
          id(display_refresh_interval) = 10;
          id(wifi_enabled) = true;
          ESP_LOGI("system", "Reset to default values completed");

  - id: toggle_wifi
    then:
      - if:
          condition:
            lambda: "return id(wifi_enabled);"
          then:
            - wifi.disable:
            - lambda: "id(wifi_enabled) = false;"
            - script.execute: update_wifi_status
            - logger.log: "WiFi disabled"
          else:
            - wifi.enable:
            - lambda: "id(wifi_enabled) = true;"
            - script.execute: update_wifi_status
            - logger.log: "WiFi enabled"

  - id: prepare_deep_sleep
    then:
      - logger.log: "=== PREPARE_DEEP_SLEEP SCRIPT STARTED ==="

      - logger.log: "Step 1: Disabling WiFi..."
      - wifi.disable:
      - delay: 500ms # Longer delay for WiFi to properly disconnect
      - logger.log: "Step 2: WiFi disabled successfully"

      - logger.log: "Step 3: Stopping BLE scanning (with check)..."
      - lambda: |-
          // Only try to stop BLE if it's actually running
          ESP_LOGI("ble", "Attempting to stop BLE scan gracefully...");
      - esp32_ble_tracker.stop_scan:
      - delay: 500ms
      - logger.log: "Step 4: BLE scanning stop attempted"

      - logger.log: "Step 5: Turning off display backlight (GPIO16)..."
      - light.turn_off: display_backlight_control
      - delay: 200ms
      - logger.log: "Step 6: Display backlight turned off successfully"

      - logger.log: "Step 7: Turning off CH422G backlight switch..."
      - switch.turn_off: lcdbacklight
      - delay: 200ms
      - logger.log: "Step 8: CH422G backlight switch turned off successfully"

      - logger.log: "Step 9: Checking LVGL status and pausing if active..."
      - if:
          condition:
            not:
              - lvgl.is_paused
          then:
            - logger.log: "Step 9a: LVGL is active, pausing now..."
            - lvgl.pause:
            - delay: 1s
            - logger.log: "Step 9b: LVGL paused successfully"
          else:
            - logger.log: "Step 9c: LVGL is already paused, skipping"
      - logger.log: "Step 10: LVGL status check completed"

      - logger.log: "Step 11: Final system cleanup..."
      - delay: 2s # Wait for all systems to stabilize
      - logger.log: "Step 12: All systems prepared for deep sleep"
      - logger.log: "Step 13: ENTERING DEEP SLEEP NOW!"
      - delay: 1s # Ensure this final log message is printed
      - deep_sleep.enter: deep_sleep_ctrl

  - id: test_deep_sleep_preparation
    then:
      - logger.log: "=== TEST_DEEP_SLEEP_PREPARATION SCRIPT STARTED ==="
      - logger.log: "Test 1: WiFi disable test..."
      - wifi.disable:
      - delay: 500ms
      - logger.log: "Test 2: WiFi enable test..."
      - wifi.enable:
      - delay: 500ms
      - logger.log: "Test 3: BLE stop scan test..."
      - esp32_ble_tracker.stop_scan:
      - delay: 500ms
      - logger.log: "Test 4: BLE start scan test (with check)..."
      - lambda: |-
          ESP_LOGI("test", "Testing BLE restart...");
      - esp32_ble_tracker.start_scan:
      - delay: 500ms
      - logger.log: "Test 5: Display backlight test..."
      - light.turn_off: display_backlight_control
      - delay: 500ms
      - light.turn_on: display_backlight_control
      - delay: 500ms
      - logger.log: "Test 6: CH422G switch test..."
      - switch.turn_off: lcdbacklight
      - delay: 500ms
      - switch.turn_on: lcdbacklight
      - delay: 500ms
      - logger.log: "=== TEST_DEEP_SLEEP_PREPARATION SCRIPT COMPLETED ==="
      - logger.log: "All tests passed - deep sleep preparation should work correctly"

  - id: restore_log_levels
    then:
      - logger.log: "=== RESTORING ORIGINAL LOG LEVELS ==="
      - logger.log: "Restoring log levels to production values..."
      - lambda: |-
          // Toto je informativní zpráva - skutečné změny log levelů vyžadují restart
          ESP_LOGI("restore", "Log levels restored to:");
          ESP_LOGI("restore", "- Main logger: INFO");
          ESP_LOGI("restore", "- esp32_ble_tracker: ERROR");
          ESP_LOGI("restore", "- victron_ble: ERROR");
          ESP_LOGI("restore", "- lvgl: ERROR");
          ESP_LOGI("restore", "- esp-idf: ERROR");
          ESP_LOGI("restore", "- wifi: ERROR");
          ESP_LOGI("restore", "Note: Restart device to apply log level changes");
      - logger.log: "=== LOG LEVELS RESTORE COMPLETED ==="
      - logger.log: "Restart the device to apply the log level changes"

  - id: monitor_ble_status
    then:
      - logger.log: "=== BLE STATUS MONITOR ==="
      - lambda: |-
          ESP_LOGI("ble_monitor", "Checking BLE tracker status...");
          // Log current BLE state for debugging
      - delay: 1s
      - logger.log: "BLE status check: Attempting controlled restart..."
      - esp32_ble_tracker.stop_scan:
      - delay: 2s
      - logger.log: "BLE stopped, waiting for restart..."
      - esp32_ble_tracker.start_scan:
      - delay: 1s
      - logger.log: "=== BLE STATUS MONITOR COMPLETED ==="

  - id: simple_deep_sleep_test
    then:
      - logger.log: "=== SIMPLE DEEP SLEEP TEST STARTED ==="
      - logger.log: "Action 1: Simple delay test..."
      - delay: 1s
      - logger.log: "Action 2: Trying WiFi disable..."
      - wifi.disable:
      - logger.log: "Action 3: WiFi disabled successfully"
      - delay: 1s
      - logger.log: "Action 4: Trying BLE stop..."
      - esp32_ble_tracker.stop_scan:
      - logger.log: "Action 5: BLE stopped successfully"
      - delay: 1s
      - logger.log: "Action 6: Testing deep sleep entry..."
      - logger.log: "FINAL: About to enter deep sleep in 3 seconds..."
      - delay: 3s
      - deep_sleep.enter: deep_sleep_ctrl

  - id: init_system_values
    then:
      - lambda: |-
          // Inicializuj systémové hodnoty při bootu
          ESP_LOGI("system", "=== INIT_SYSTEM_VALUES SCRIPT STARTED ===");
          ESP_LOGI("system", "=== SYSTEM VALUES AFTER NVS RESTORE ===");
          ESP_LOGI("system", "deep_sleep_timeout: %d", id(deep_sleep_timeout));
          ESP_LOGI("system", "ble_scan_interval: %d", id(ble_scan_interval));
          ESP_LOGI("system", "display_brightness: %d", id(display_brightness));
          ESP_LOGI("system", "display_refresh_interval: %d", id(display_refresh_interval));
          ESP_LOGI("system", "=== END SYSTEM VALUES ===");
          ESP_LOGI("system", "=== INIT_SYSTEM_VALUES SCRIPT COMPLETED ===");

          // Test GPIO16 backlight
          ESP_LOGI("backlight", "Testing GPIO16 backlight output...");
          id(id_output_backlight_brightness).set_level(0.5f);
          delay(1000);
          id(id_output_backlight_brightness).set_level(0.0f);
          delay(500);
          id(id_output_backlight_brightness).set_level(1.0f);
          ESP_LOGI("backlight", "GPIO16 test completed");

          // Inicializuj UI komponenty s aktuálními hodnotami
          // Tyto komponenty se inicializují po vytvoření LVGL stránky
          delay(3000); // Počkat na vytvoření UI

          // Inicializuj brightness slider a hodnotu
          // Tyto komponenty se inicializují po vytvoření LVGL stránky
          lv_slider_set_value(id(brightness_slider), (int32_t)id(display_brightness), LV_ANIM_OFF);
          lv_label_set_text(id(brightness_value), str_sprintf("%d%%", id(display_brightness)).c_str());

          // Inicializuj ostatní hodnoty
          lv_label_set_text(id(deep_sleep_value), str_sprintf("%.0f", (float)id(deep_sleep_timeout)).c_str());
          lv_label_set_text(id(ble_scan_value), str_sprintf("%.0f", (float)id(ble_scan_interval)).c_str());
          lv_label_set_text(id(refresh_value), str_sprintf("%.0f", (float)id(display_refresh_interval)).c_str());

          // Inicializuj WiFi toggle button
          if (id(wifi_enabled)) {
            lv_obj_set_style_bg_color(id(wifi_toggle_btn), lv_color_hex(0x4CAF50), LV_PART_MAIN);
            lv_label_set_text(id(wifi_btn_label), "ZAPNUTO");
          } else {
            lv_obj_set_style_bg_color(id(wifi_toggle_btn), lv_color_hex(0xFF5722), LV_PART_MAIN);
            lv_label_set_text(id(wifi_btn_label), "VYPNUTO");
          }

          ESP_LOGI("system", "UI values initialized including WiFi toggle button");

#esp32_touch:
#  setup_mode: false

#binary_sensor:
#  - platform: esp32_touch
#    name: "Touch Wakeup Button"
#    pin: GPIO4
#    threshold: 1000 # citlivost pro běžné detekce
#    wakeup_threshold: 1200 # citlivost pro probuzení ze spánku

# Wake-up pomocí GPIO15 (RS485 TXD pin - volný pro wake-up) - ZATÍM VYPNUTO PRO TEST
deep_sleep:
  id: deep_sleep_ctrl
  touch_wakeup: true

#   wakeup_pin: GPIO15 # Externí tlačítko pro probuzení (RS485 TXD pin)
#   wakeup_pin_mode: INVERT_WAKEUP # Probuzení při stisknutí (LOW)
#   sleep_duration: 12h # Maximální doba spánku jako záloha

# Backlight
# GPIO16 is mapped to RS-485 output port, pin A
# This GPIO should be wired to the solderpad on the right of the ESP32-S3 module, next to its antenna, below 2 * 0603 ceramic capacitors
# https://community.home-assistant.io/t/esp32-s3-7inch-capacitive-touch-display-adjust-brightness/771030
output:
  - platform: ledc
    pin: GPIO16
    id: id_output_backlight_brightness
    min_power: 0.08
    frequency: 5000Hz

# NOVÉ - Light komponenta pro brightness control:
light:
  - platform: monochromatic
    output: id_output_backlight_brightness
    name: "Display Brightness"
    id: display_backlight_control
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms

ch422g:
  - id: ch422g_hub

switch:
  - platform: restart
    name: "Restart"
    id: device_restart

  - platform: safe_mode
    name: Use Safe Mode
    id: device_safe_mode

  - platform: gpio
    id: lcdbacklight
    name: lcdbacklight
    pin:
      ch422g: ch422g_hub
      number: 2
      mode:
        output: true
      inverted: false
    restore_mode: ALWAYS_ON

# Touch screen
touchscreen:
  platform: gt911
  address: 0x5D
  id: my_touchscreen
  interrupt_pin: 4
  reset_pin:
    ch422g: ch422g_hub
    number: 1
  on_release:
    - if:
        condition:
          and:
            - switch.is_off: lcdbacklight
            - light.is_off: display_backlight_control
            - lambda: "return !id(ignore_touch);"
        then:
          - if:
              condition:
                lambda: "return id(manual_display_off);"
              then:
                - globals.set:
                    id: manual_display_off
                    value: "false"
                - switch.turn_on: lcdbacklight
                - light.turn_on: display_backlight_control
                - lvgl.resume:
                # Restart BLE scanning after wake up (with check)
                - lambda: |-
                    ESP_LOGI("touch_wake", "Restarting BLE scanner after wake up...");
                - esp32_ble_tracker.start_scan:
                - wifi.enable:
                - logger.log: "Woke up from deep sleep, restarting services"
              else:
                - script.execute: touch_wake

# Display
display:
  - platform: rpi_dpi_rgb
    id: device_display
    update_interval: never
    auto_clear_enabled: false
    color_order: RGB
    pclk_frequency: 16MHz
    dimensions:
      width: 800
      height: 480
    reset_pin:
      ch422g: ch422g_hub
      number: 3
    de_pin:
      number: 5
    hsync_pin:
      number: 46
      ignore_strapping_warning: true
    vsync_pin:
      number: 3
      ignore_strapping_warning: true
    pclk_pin: 7
    pclk_inverted: true
    hsync_back_porch: 8
    hsync_front_porch: 8
    hsync_pulse_width: 4
    vsync_back_porch: 16
    vsync_front_porch: 16
    vsync_pulse_width: 4
    data_pins:
      red:
        - 1 #r3.
        - 2 #r4.
        - 42 #r5
        - 41 #r6
        - 40 #r7
      blue:
        - 14 #b3
        - 38 #b4
        - 18 #b5
        - 17 #b6
        - 10 #b7
      green:
        - 39 #g2
        - 0 #g3.
        - 45 #g4
        - 48 #g5
        - 47 #g6
        - 21 #g7
